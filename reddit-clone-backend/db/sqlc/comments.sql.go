// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package sqlc

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (post_id, user_id, comment_content)
VALUES ($1, $2, $3)
RETURNING post_id
`

type CreateCommentParams struct {
	PostID         int64  `json:"post_id"`
	UserID         int64  `json:"user_id"`
	CommentContent string `json:"comment_content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.CommentContent)
	var post_id int64
	err := row.Scan(&post_id)
	return post_id, err
}

const getAllComments = `-- name: GetAllComments :many
SELECT comment_id, post_id, user_id, comment_content FROM comments
`

func (q *Queries) GetAllComments(ctx context.Context) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getAllComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.CommentID,
			&i.PostID,
			&i.UserID,
			&i.CommentContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
