// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (user_id, post_title, post_content)
VALUES ($1, $2, $3)
RETURNING post_id
`

type CreatePostParams struct {
	UserID      int64          `json:"user_id"`
	PostTitle   string         `json:"post_title"`
	PostContent sql.NullString `json:"post_content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.PostTitle, arg.PostContent)
	var post_id int64
	err := row.Scan(&post_id)
	return post_id, err
}

const editPost = `-- name: EditPost :one
UPDATE posts 
SET post_title = COALESCE($1, post_title), post_content = COALESCE($2, post_content)
WHERE post_id = $3
RETURNING post_id
`

type EditPostParams struct {
	PostTitle   string         `json:"post_title"`
	PostContent sql.NullString `json:"post_content"`
	PostID      int64          `json:"post_id"`
}

func (q *Queries) EditPost(ctx context.Context, arg EditPostParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, editPost, arg.PostTitle, arg.PostContent, arg.PostID)
	var post_id int64
	err := row.Scan(&post_id)
	return post_id, err
}

const getAllPost = `-- name: GetAllPost :many
SELECT post_id, user_id, post_title, post_content FROM posts
`

func (q *Queries) GetAllPost(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.PostTitle,
			&i.PostContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPostByUserID = `-- name: GetAllPostByUserID :many
SELECT post_id, user_id, post_title, post_content FROM posts WHERE user_id = $1
`

func (q *Queries) GetAllPostByUserID(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.PostID,
			&i.UserID,
			&i.PostTitle,
			&i.PostContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByPostID = `-- name: GetPostByPostID :one
SELECT post_id, user_id, post_title, post_content FROM posts WHERE post_id = $1
`

func (q *Queries) GetPostByPostID(ctx context.Context, postID int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByPostID, postID)
	var i Post
	err := row.Scan(
		&i.PostID,
		&i.UserID,
		&i.PostTitle,
		&i.PostContent,
	)
	return i, err
}
