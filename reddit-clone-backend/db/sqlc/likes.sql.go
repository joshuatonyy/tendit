// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package sqlc

import (
	"context"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes (post_id, user_id)
VALUES ($1, $2)
RETURNING post_id, user_id
`

type CreateLikeParams struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

type CreateLikeRow struct {
	PostID int64 `json:"post_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (CreateLikeRow, error) {
	row := q.db.QueryRowContext(ctx, createLike, arg.PostID, arg.UserID)
	var i CreateLikeRow
	err := row.Scan(&i.PostID, &i.UserID)
	return i, err
}

const getAllLikes = `-- name: GetAllLikes :many
SELECT user_id, post_id FROM likes
`

func (q *Queries) GetAllLikes(ctx context.Context) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, getAllLikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.UserID, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLikesByUserID = `-- name: GetAllLikesByUserID :many
SELECT user_id, post_id FROM likes WHERE user_id = $1
`

func (q *Queries) GetAllLikesByUserID(ctx context.Context, userID int64) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, getAllLikesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.UserID, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
